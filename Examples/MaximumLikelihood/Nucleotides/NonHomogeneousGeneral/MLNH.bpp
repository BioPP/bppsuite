#Initial log likelihood.................: -71011.8177084265
#Log likelihood.........................: -65343.8442233959
#GC.theta...............................: 0.483464
#T92.kappa_1............................: 2.63716
#T92.theta_1............................: 0.576654
#T92.theta_2............................: 0.445837
#Gamma.alpha............................: 0.439279
#111.83user 0.07system 1:52.90elapsed 99%CPU


# Global variables:
DATA = LSU

# Sequences:

# The alphabet to use:
# DNA, RNA or Protein
alphabet=DNA

# The sequence file to use (sequences must be aligned!)
input.sequence.file=../../../Data/$(DATA).phy

# The alignment format:
input.sequence.format=Phylip(order=sequential, type=extended)

#Sites to use:
# all, nogap or complete (=only resolved chars)
input.sequence.sites_to_use = complete
# Specify a maximum amount of gaps: may be an absolute number or a percentage.
input.sequence.max_gap_allowed = 100%

# ----------------------------------------------------------------------------------------
#                                     Input tree file
# ----------------------------------------------------------------------------------------

# user or random
init.tree = user

input.tree.file = ../../../Data/$(DATA).dnd
input.tree.format = Newick

init.brlen.method = Input

# ----------------------------------------------------------------------------------------
#                                     Model specification
# ----------------------------------------------------------------------------------------

# Homogeneous model?
# no => Homogeneous case
# one_per_branch => Galtier & Gouy 97 series of NH models
# general => Specify the model by hand.
nonhomogeneous = general

nonhomogeneous.root_freq=GC(init=balanced)

rate_distribution = Gamma(n=4, alpha=0.358)

# Now the general heterogeneous case:
# Specify the number of distincts models.
nonhomogeneous.number_of_models = 2

# Set up each model:
model1 = T92(kappa=2, theta=0.5, useObservedFreqs=no)
model1.nodes_id=0:62 # The Ids of the nodes to which this model should be assigned.

model2 = T92(kappa=model1.T92.kappa, theta=0.9, useObservedFreqs=no)
model2.nodes_id=63:154

# Likelihood recursion option:
# - simple: derivatives takes more time to compute, but likelihooh computation is faster.
#   For big data sets, it can save a lot of memory usage too, particularly when the data are compressed.
# - double: Uses more memory and need more time to compute likelihood, due to the double recursion.
#   Analytical derivatives are however faster to compute.
likelihood.recursion = simple

# Site compression for the simple recursion:
# - simple: identical sites are not computed twice
# - recursive: look for site patterns to save computation time during optimization, but
#   requires extra time for building the patterns.
#   This is usually the best option, particularly for nucleotides data sets.
likelihood.recursion_simple.compression = recursive

# ----------------------------------------------------------------------------------------
#                                     Optimization
# ----------------------------------------------------------------------------------------


optimization=yes
optimization.reparametrization=no
optimization.verbose = 1
optimization.ignore_parameter =
optimization.max_number_f_eval = 10000
optimization.tolerance = 0.000001
optimization.message_handler = $(DATA).messages
optimization.profiler = $(DATA).profile

optimization.topology = no
optimization.topology.nstep=4
optimization.topology.numfirst=no
optimization.topology.tolerance.before=100
optimization.topology.tolerance.during=100
optimization.method=fullD //[DB|fullD]
optimization.method_DB.nstep=5
optimization.scale_first=no
optimization.verbose=3

# Should we write the resulting tree? none or file name.
output.tree.file = $(DATA).ML.dnd
output.tree.format = Newick

# Alignment information log file (site specific rates, etc):
output.infos = $(DATA).infos

# Write numerical parameter estimated values:
output.estimates = $(DATA).params.txt

# ----------------------------------------------------------------------------------------
#                                     Bootstrap
# ----------------------------------------------------------------------------------------

bootstrap.number = 0
# Tell if numerical parameters should be kept to their initial value when bootstrapping: 
bootstrap.approximate = no
# Set this to yes for detailed output when bootstrapping. 
bootstrap.verbose = no
bootstrap.output.file = $(DATA).ML_bstrees.dnd

