# SPDX-FileCopyrightText: The Bio++ Development Group
#
# SPDX-License-Identifier: CECILL-2.1

#initial logL: -5140.62856257665
#final   logL: -4958.52926533168

# Global variables:
DATA = eyal_protein

# Sequences:

# The alphabet to use:
# DNA, RNA or Protein
alphabet=Protein

# The sequence file to use (sequences must be aligned!)
input.data1=alignment(file=../../../Data/$(DATA).fasta, format=Fasta, sites_to_use = all, max_gap_allowed = 50%)

# ----------------------------------------------------------------------------------------
#                                     Input tree file
# ----------------------------------------------------------------------------------------

input.tree1=user(file = ../../../Data/$(DATA)_tree.newick, format = Newick)

# ----------------------------------------------------------------------------------------
#                                     Model specification
# ----------------------------------------------------------------------------------------
# See the manual for a description of the syntax and available options.
#

model1 = JTT92(data=1) //JC69 //JTT92(initFreqs=observed, data=1)

rate_distribution1 = Gamma(n=32, alpha=1) //Constant

process1 = Homogeneous(model=1, tree=1, rate=1)

phylo1 = Single(process=1, data=1)

# ----------------------------------------------------------------------------------------
#                                     Optimization
# ----------------------------------------------------------------------------------------

# Should we reestimate likelihood parameters? Tree topology will not be optimized.
# (recommended)
# Method to use for optimizing numerical parameters:
# - None, no optimization performed
# - DB derivatives for branch lengths + Brent for other parameters
# - FullD derivatives for all parameters, using numerical derivatives for non-branch lengths parameters.
optimization = D-Brent(derivatives=Newton)

# Tell if the parameter should be transformed in order to remove constraints.
# This can improves the optimization, but might be a bit slower.
optimization.reparametrization = no

# Final optimization step, may be useful if numerical derivatives are used:
# powell or simplex or none.
optimization.final = none

# Set the quantity of output to the screen:
optimization.verbose = 3

# Parameters to ignore (for instance equilibrium frequencies)
optimization.ignore_parameters = BrLen

# Maximum number of likelihood evaluations:
optimization.max_number_f_eval = 10000

# Precision to reach:
optimization.tolerance = 0.0001

# idem for error or warning messages:
optimization.message_handler = $(DATA).messages

# A file where to dump optimization steps (a file path or std for standard output)
optimization.profiler = $(DATA).profile

# Should we write the resulting tree? none or file name.
output.tree.file = $(DATA).R4S.dnd
output.tree.format = Newick

# Alignment information log file (site specific rates, etc):
output.infos = $(DATA).infos

# Write numerical parameter estimated values:
output.estimates = $(DATA).params.txt

# ----------------------------------------------------------------------------------------
#                                     Bootstrap
# ----------------------------------------------------------------------------------------

bootstrap.number = 0
# Tell if numerical parameters should be kept to their initial value when bootstrapping: 
bootstrap.approximate = no
# Set this to yes for detailed output when bootstrapping. 
bootstrap.verbose = no
bootstrap.output.file = $(DATA).R4S_bstrees.dnd

