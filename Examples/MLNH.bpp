# Global variables:
DATA = LSU

# Sequences:

# The alphabet to use:
# DNA, RNA or Protein
alphabet=DNA

# The sequence file to use (sequences must be aligned!)
sequence.file=$(DATA).phy

# The alignment format:
# Must be one of Mase, Fasta, Phylip, Clustal, DCSE 
sequence.format=Phylip

# Mase format option:
sequence.format_mase.site_selection =

# Phylip format options:
# interleaved or sequential:
sequence.format_phylip.order = sequential

# classic or extended (PAML):
sequence.format_phylip.ext = extended

#Sites to use:
# all, nogap or complete (=only resolved chars)
sequence.sites_to_use = complete
# Specify a maximum amount of gaps: may be an absolute number or a percentage.
sequence.max_gap_allowed = 100%

tree.file = LSUrooted.dnd

# Print a tree with ids as bootstrap values.
# This is helpful when setting up complexe non-homogeneous models.
# Setting this option will cause the program to exit after printing the tree.
//output.tree.path = LSUrooted_wid.dnd

# ----------------------------------------------------------------------------------------
#                                     Model specification
# ----------------------------------------------------------------------------------------

# Homogeneous model?
# no => Homogeneous case
# one_per_branch => Galtier & Gouy 97 series of NH models
# general => Specify the model by hand.
nonhomogeneous = general

# How to deal with root frequencies:
# balanced  : all frequencies are set to 1/size of the alphabet
# observed  : use observed counts in the data set
# init      : manually set the frequencies (they have to sum to one)
# For nucleotides, one can use the GC rate (theta) parametrization, like in the T92 model:
# balancedGC: ancestral GC set to 0.5
# observedGC: use observed GC content
# initGC    : manually set the ancestral GC content.
nonhomogeneous.root_freq=balancedGC

# If the init option is selected, ignored otherwise:
model.ancA=
model.ancC=
model.ancG=
model.ancT=
# or:
model.ancA=
model.ancR=
model.ancN=
#etc

# If the initGC option is used, ignored otherwise:
model.ancTheta=0.5

# Now the general heterogeneous case:
# Specify the number of distincts models.
nonhomogeneous.number_of_models = 2
# Set up each model:
model1.name=T92 # The name of the model, as above. Covarion models can be used.
model1.kappa=2 # Initial values for each parameter.
model1.theta=0.5
model1.nodes_id=0:62 # The Ids of the nodes to which this model should be assigned.
model1.use_observed_freq=no

model2.name=T92
model2.kappa=model1.kappa # or model2.kappa=model1.kappa if you want only one kappa parameter estimated for both models.
model2.theta=0.9
model2.nodes_id=63:155
model2.use_observed_freq=no

//model3.name=HKY85
//model3.kappa=2
//model3.piA = 0.13
//model3.piT = 0.16
//model3.piC = 0.31
//model3.piG = 0.40
#etc

# Rate Across Sites variation:
# gamma or constant
rate_distribution = gamma

# The gamma distribution's shape parameter
rate_distribution.alpha = 0.358

# Number of classes for discretization:
rate_distribution.classes_number = 4

# Likelihood recursion option:
# - simple: derivatives takes more time to compute, but likelihooh computation is faster.
#   For big data sets, it can save a lot of memory usage too, particularly when the data are compressed.
# - double: Uses more memory and need more time to compute likelihood, due to the double recursion.
#   Analytical derivatives are however faster to compute.
likelihood.recursion = simple

# Site compression for the simple recursion:
# - simple: identical sites are not computed twice
# - recursive: look for site patterns to save computation time during optimization, but
#   requires extra time for building the patterns.
#   This is usually the best option, particularly for nucleotides data sets.
likelihood.recursion_simple.compression = recursive

# ----------------------------------------------------------------------------------------
#                                     Optimization
# ----------------------------------------------------------------------------------------


optimization=yes
optimization.verbose = 1
optimization.ignore_parameter =
optimization.max_number_f_eval = 10000
optimization.tolerance = 0.000001
optimization.message_handler = $(DATA).messages
optimization.profiler = $(DATA).profile

optimization.topology = no
optimization.topology.nstep=4
optimization.topology.numfirst=no
optimization.topology.tolerance.before=100
optimization.topology.tolerance.during=100
optimization.method=DB //[DB|fullD]
optimization.method_DB.nstep=1
optimization.scale_first=no
optimization.verbose=3

# Should we write the resulting tree? none or file name.
output.tree.file = $(DATA).ML.dnd

# Alignment information log file (site specific rates, etc):
output.infos = $(DATA).infos

# Write numerical parameter estimated values:
output.estimates = $(DATA).params.txt

# ----------------------------------------------------------------------------------------
#                                     Bootstrap
# ----------------------------------------------------------------------------------------

bootstrap.number = 0
# Tell if numerical parameters should be kept to their initial value when bootstrapping: 
bootstrap.approximate = no
# Set this to yes for detailed output when bootstrapping. 
bootstrap.verbose = no
bootstrap.output.file = $(DATA).ML_bstrees.dnd

