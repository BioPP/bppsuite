# Global variables:
DATA = LSU

# Sequences:

# The alphabet to use:
# DNA, RNA or Protein
alphabet=DNA

# The sequence file to use (sequences must be aligned!)
input.sequence.file=$(DATA).phy

# The alignment format:
input.sequence.format=Phylip(order=sequential, type=extended)

#Sites to use:
# all, nogap or complete (=only resolved chars)
input.sequence.sites_to_use = complete
# Specify a maximum amount of gaps: may be an absolute number or a percentage.
input.sequence.max_gap_allowed = 100%

# ----------------------------------------------------------------------------------------
#                                     Input tree file
# ----------------------------------------------------------------------------------------

# user or random
init.tree = user

input.tree.file = $(DATA).dnd
input.tree.format = Newick

#input: keep initial branch lengths
#equal: put all branch lengths to the same value
#clock: coerce to a clock tree
#grafen: uses Grafen's method to compute branch lengths
init.brlen.method = input
#The value for the equal option:
init.brlen.method_equal.value = 0.1
#The height of the tree for Grafen's method (input for using the current height of the tree)
init.brlen.method_grafen.height = input
#Grafen's power parameter:
init.brlen.method_grafen.rho = 1.0

# ----------------------------------------------------------------------------------------
#                                     Model specification
# ----------------------------------------------------------------------------------------
# See the manual for a description of the syntax and available options.
#

# Homogeneous model?
# no => Homogeneous case
# one_per_branch => Galtier & Gouy 97 series of NH models
# general => Specify the model by hand.
nonhomogeneous = one_per_branch

# Options for non-homogeneous one-per_branch models:
model = T92(kappa=2.843, theta=0.5)

# For one_per_branch heterogeneous models.
# Tell which parameters are common to all branches.
# Other parameters will be considered branch specific.
nonhomogeneous_one_per_branch.shared_parameters = T92.kappa

nonhomogeneous.root_freq=BalancedGC()

rate_distribution = Gamma(n=4, alpha=0.358)

# Likelihood recursion option:
# - simple: derivatives takes more time to compute, but likelihooh computation is faster.
#   For big data sets, it can save a lot of memory usage too, particularly when the data are compressed.
# - double: Uses more memory and need more time to compute likelihood, due to the double recursion.
#   Analytical derivatives are however faster to compute.
likelihood.recursion = simple

# Site compression for the simple recursion:
# - simple: identical sites are not computed twice
# - recursive: look for site patterns to save computation time during optimization, but
#   requires extra time for building the patterns.
#   This is usually the best option, particularly for nucleotides data sets.
likelihood.recursion_simple.compression = recursive

# ----------------------------------------------------------------------------------------
#                                     Optimization
# ----------------------------------------------------------------------------------------

optimization=yes
optimization.verbose = 1
optimization.ignore_parameter =
optimization.max_number_f_eval = 10000
optimization.tolerance = 0.000001
optimization.message_handler = $(DATA).messages
optimization.profiler = $(DATA).profile

optimization.topology = no
optimization.topology.nstep=4
optimization.topology.numfirst=no
optimization.topology.tolerance.before=100
optimization.topology.tolerance.during=100
optimization.method=fullD //[DB|fullD]
optimization.method_DB.nstep=15
optimization.scale_first=no
optimization.verbose=3
optimization.ignore_parameter=

# Should we write the resulting tree? none or file name.
output.tree.file = $(DATA).ML.dnd
output.tree.format = Newick

# Alignment information log file (site specific rates, etc):
output.infos = $(DATA).infos

# Write numerical parameter estimated values:
output.estimates = $(DATA).params.txt

# ----------------------------------------------------------------------------------------
#                                     Bootstrap
# ----------------------------------------------------------------------------------------

bootstrap.number = 0
# Tell if numerical parameters should be kept to their initial value when bootstrapping: 
bootstrap.approximate = no
# Set this to yes for detailed output when bootstrapping. 
bootstrap.verbose = no
bootstrap.output.file = $(DATA).ML_bstrees.dnd

