\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename bppsuite.info
@settitle BppSuite Manual 0.4.0
@afourpaper
@c %**end of header

@include version.texi

@copying
This is the manual of the Bio++ Program Suite, version @value{VERSION}, @value{UPDATED}.

Copyright @copyright{} 2007, 2008, 2009 Julien Dutheil
@end copying

@titlepage
@title BppSuite Manual
@author Julien Dutheil
@author @email{jdutheil@@birc.au.dk}

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1fill1
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Bio++ Program Suite Manual

@insertcopying
@end ifnottex

@menu
* Introduction::                Introducing the Bio++ Program Suite and this manual.                
* Syntax::                      A general description of the syntax used to communicate with the programs.
* Common::                      Common options shared by several programs.                      
* Reference::                   The exhaustive list of options available for all programs in the Bio++ Program Suite.

@detailmenu
 --- The Detailed Node Listing ---

Common options encountered in several programs.

* Sequences::                   Loading sequences/alignments.
* Tree::                        Loading trees.
* Model::                       Setting up a substitution model.
* Estimation::                  Estimating parameters by maximizing a likelihood function.
* WritingSequences::            Writing sequences/alignments to files. 

Bio++ Program Suite Reference

* bppml::                       Bio++ Maximum Likelihood.
* bppseqgen::                   Bio++ Sequence Generator.
* bppancestor::                 Bio++ Ancestral Sequences and Rates reconstruction.
* bppdist::                     Bio++ Distance Methods.
* bpppars::                     Bio++ Maximum Parsimony.
* bppconsense::                 Bio++ Consensus Trees.
* bppphysamp::                  Bio++ Phylogenetic Sampler.
* bppreroot::                   Bio++ Serial Tree Re-rooting.
* bppseqman::                   Bio++ Sequences Manipulation.

@end detailmenu
@end menu

@c ------------------------------------------------------------------------------------------------------------------

@node Introduction, Syntax, Top, Top
@chapter Introduction

The Bio++ Program Suite is a package of programs using the Bio++ libraries and dedicated to Phylogenetics and Molecular Evolution.
All programs are independent, but can be combined to perform rather complex analyses.
These programs use the interface helper tools of the libraries, and hence share the same syntax.
They also have several options in common, which may also be shared by third-party software.
This manual was hence split into three parts: 
@table @emph
@item Bio++ option file syntax
A general description of the language used to interact with the programs.

@item Shared options
A more detailed description about several options that are encountered in several programs.
This includes input/output of data and model specifications.

@item The Bio++ Program Suite reference
Include a reference of all available options for each program in the package.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node Syntax, Common, Introduction, Top
@chapter Syntax description

@section Calling the programs and writing the option files.

The programs in the Bio++ Program Suite are command line-driven.
Arguments may be passed as @command{parameter=value} options, either directly to the command line or
using an option file:
@cartouche
@example
@{program@} parameter1=value1 parameter2=value2 ... parameterN=valueN
@end example
@end cartouche
or
@cartouche
@example
@{program@} param=option_file
@end example
@end cartouche
where @{program@} is the name of the program to use (bppml, bppseqgen, etc.).
Option files contain @command{parameter=value} lines, with only one parameter per line.
They can be written from scratch using a regular text editor, but since these files can potentially turn to be quite complex, it is probably wiser to start with a sample provided along with the program (if any!).

Extra-space may be included between parameter names, equal sign and value:
@cartouche
@example
first_parameter   = value1
second_parameter  = value2
@end example
@end cartouche
and lines can be broken using the backslash character:
@cartouche
@example
parameter = value1,\
            value2,\
            value3
@end example
@end cartouche

Comment may be included, in either scripting format:
@cartouche
@example
# This is a comment
@end example
@end cartouche
C format:
@cartouche
@example
/* This is a comment
*/
@end example
@end cartouche
or C++ format:
@cartouche
@example
// This is a comment
@end example
@end cartouche
Command line and file options may be combined:
@cartouche
@example
@{program@} param=option_file parameterX=valueX
@end example
@end cartouche
In case @command{parameterX} is specified in both option file and command line, the command line value will be used.
This allows to run the programs several times by changing a single option, like the name of the data set for instance.

Option files can be nested, by using @command{param=nestedoptionfile} within an option file, as with the command line.
It is possible to use this option as often as needed, this will load all the required option files.

@section Different types of options

The next chapters describe the whole set of options available in BppSuite.
For each parameter, the type of parameter value expected is defined as:
@table @command
@item @{chars@}
A character chain

@item @{path@}
A file path, which may be absolute or related to the current directory

@item @{int@}
An integer

@item @{int@}, @{int>0@}, @{int>=0@}, @{int[2,10]@}
An integer, a positive integer, a positive non-null integer, an
integer falling between 2 and 10

@item @{real@}, @{real>0@}, etc
A real number, a positive real number, etc.

@item @{boolean@}
A Boolean value, which may be one of 'yes', 'no', 'true' or 'false'

@item @{xxx|yyy|zzz@}
A set of allowed values

@item @{list<type>@}
A list of values of specified type, separated by comas.

@end table

If an option availability or choice depends on another parameters, it will be noted as

@example
parameter1=@{xxx|yyy|zzz@}

parameter2=@{chars@} [[parameter1=zzz]]
@end example
meaning that parameter2 is available only if parameter1 is set to 'zzz'.

Any optional argument will be noted within hooks [].

In some cases, the argument value is more complexe and follows the 'keyval'
syntax.
This syntax will be quite familiar for users using languages like R, Python, or
certain LaTeX packages.
A keyval procedure is a name that does no contain any space, together with some
arguments within parentheses.
The arguments take the form @command{key=value}, separated by comas:
@cartouche
@example
parameter=Function(name1=value1, name2=value2)
@end example
@end cartouche
Space characters are allowed around the '=' and ',' ponctuations.

@section Variables

It is possible to recall anywhere the value of an option by using $(parameter).
@cartouche
@example
optimization.topology.algorithm = NNI
optimization.topology.algorithm_nni.method = phyml
output.tree = MyData_$(optimization.topology.algorithm)_$(optimization.topology.algorithm_nni.method).dnd
@end example
@end cartouche
You can use this syntax to define global variables:
@cartouche
@example
data=MyData
sequence.file=$(data).fasta
input.tree=$(data).dnd
output.infos=$(data).infos
@end example
@end cartouche

Important note: it is not possible to use a macro with the 'param' option.
This is because all nested option files are parsed before the variable resolution.
Writing @command{param=$(model1).bpp} will not work, but this allows the user to override variables in nested files, as with the command line.
For instance:
@cartouche
@example
#Option file 1:
param=options2.bpp
sequence.file=$(data).fasta
sequence.format=Fasta
@end example
@end cartouche
@cartouche
@example
#Option file 2:
data=LSU
#etc
@end example
@end cartouche
 
@c ------------------------------------------------------------------------------------------------------------------

@node Common, Reference, Syntax, Top
@chapter Common options encountered in several programs.

@c ------------------------------------------------------------------------------------------------------------------

@menu
* Sequences::                   Loading sequences/alignments.
* Tree::                        Loading trees.
* Model::                       Setting up a substitution model.
* Estimation::                  Estimating parameters by maximizing a likelihood function.
* WritingSequences::            Writing sequences/alignments to files. 
@end menu

@node Sequences, Tree, Common, Common
@section Setting alphabet and reading sequences

@table @command
@item alphabet = @{DNA|RNA|Protein|
Word(letter=@{DNA|RNA|Protein@},length=@{int@})| codonalphabet(letter=@{DNA|RNA@})@}

with 

codonalphabet= @{EchinodermMitochondrialCodonAlphabet|
InvertebrateMitochondrialCodonAlphabet| StandardCodonAlphabet|
VertebrateMitochondrialCodonAlphabet@} 

The alphabet to use when reading sequences. 

@item input.sequence.file=@{path@}
The sequence file to use. Depending on the program, these sequences have or do not have to be aligned.

@item input.sequence.format = @{sequence format description@}
The sequence file format.

@end table
Since Bio++ Program Suite version 0.4.0, the format description uses the keyval syntax.
The format is a function, with optional parameters:

@table @command

@item Fasta()
The fasta format.

@item Mase(siteSelection=@{chars@})
The Mase format (as read by Seaview and Phylo_win for instance), with an optional site selection name.

@item Phylip(order=@{interleaved|sequential@}, type=@{classic|extended@}, split=@{spaces|tab@})
The Phylip format, with several variations.
The argument @command{order} distinguishes between sequential and interleaved format, while the option @command{type} distinguished between the plain old Phylip format and the more recent extension allowing for sequence names longer than 10 characters, as understood by PAML and PhyML.
Finally, the @command{split} argument specifies the type of character that separates the sequence name from the sequence content.
The conventional option is to use one (classic) or more (extended) spaces, but tabs can also be used instead.

@item Clustal(extraSpaces=@{int@})
The Clustal format.
In its basic set up, sequence names do not have space characters, and one space splits the sequence content from its name.
The parser can however be configured to allow for spaces in the sequence names, providing a minimum number of space characters is used to split the content from the name.
Setting @command{extraSpaces} to 5 for instance, the sequences are expected to be at least 6 spaces away for their names.

@item Dcse()
The DCSE alignment format. The secondary structure annotation will be ignored.

@item Nexus()
The Nexus alignment format.
Only very basic support is provided.

@end table

For programs that do not require the sequences to be aligned, the following formats are also available:
@table @command

@item GenBank()
Very basic support: only retrieves the sequence content for now, all features are ignored.

@end table

Basic operations can be performed on the sequences:

@table @command

@item input.sequence.sites_to_use = @{all|nogap|complete@}
This option only works if the program requires an alignment.
Tells which sites to use.
The @option{nogap} option removes all sites containing at least one
gap, and the @option{complete} option removes all sites containing at
least one gap or one generic character, as 'X' for instance.

@item input.sequence.max_gap_allowed=100%
This option only works if the program requires an alignment.
Only works when the @option{all} option is selected.
It specifies the maximum amount of gap allowed per site, as a number
of sequence or a percentage.
Sites not matching the criterion will not be included in the analysis, but the
original site numbering will be used in the output files (if relevent).

@end table
 
@c ------------------------------------------------------------------------------------------------------------------

@node Tree, Model, Sequences, Common
@section Reading trees

@table @command
@item input.tree.file = @{path@}
The phylogenetic tree file to use.

@item input.tree.format = @{Newick|Nexus@}
The format of the input tree file.

@end table

Some programs may require that your file contains several trees.
The corresponding options are then:

@table @command
@item input.trees.file = @{path@}
The file containing multiple trees.

@item input.trees.format = @{Newick|Nexus@}
The format of the input tree file.

@end table


@c ------------------------------------------------------------------------------------------------------------------

@node Model, Estimation, Tree, Common
@section Model specification

@table @command
@item nonhomogeneous = @{no|one_per_branch_general@}
Set the type of model. The @option{no} option is used for homogeneous models.
The @option{one_per_branch} option is used as a short cut for setting Galtier and Gouy 97-like branch-specific models, and the @option{general} option for non-stationary and eventually non-homogeneous models.
In either of the last two cases, the model is non-stationary, that is, possibly not at the equilibrium and hence includes the root frequencies as additional parameters.
If the substitution model is not the same across the tree, then the model is also non-homogeneous.
@end table

@subsection Setting up the substitution model

@table @command

@item model = @{model description@}
A description of the substitution model to use, using the keyval syntax.

@end table
From version 0.4.0 of BppSuite, the model specification uses a completely new syntax, based on the keyval (key = value) scheme.
The old option files will hence not be compatible with new version of the software.
The new syntax however is hopefully more intuitive, and more generalizable, so that few changes are expected when new models will be built. The substitution model is a function, potentially including parameters. The following table lists the set of usable functions, and their parameters.

@subsubsection{Single site models}

@table @command

@item JC69
The Jukes and Cantor model, for proteins or nucleotide alphabets.
This model has no additional parameter.

@item K80(kappa=@{real>0@})
The Kimura 2 parameters model for nucleotides. @var{kappa} is the transition over transversion ratio.

@item F84(kappa=@{real>0@}, theta=@{real]0,1[@}, theta1=@{real]0,1[@}, theta2=@{real]0,1[@}, useObservedFreqs=@{boolean@}, useObservedFreqs.pseudoCount=@{int>0@})
Felsenstein's 1984 substitution model for nucleotides, with
transition/transversion ratio and 4 distinct equilibrium frequencies, set using
three independent parameters: @var{theta} is the GC content, @var{theta1} is the proportion of G / (G + C) and @var{theta2} is the proportion of A / (A + T or U).
The @var{useObservedFreqs} option set the @var{theta}s parameters according to the observed counts in the data set, and @var{useObservedFreqs.pseudoCount} is a quantity, defaulting to 0, that can be used in case some counts are zero, on small data sets for instance.
The corrected values are computed as:
@tex
$$\pi_i = {f_i + \psi \over 4\cdot\psi + \sum_j f_j}$$
@end tex

@item HKY85(kappa=@{real>0@}, theta=@{real]0,1[@}, theta1=@{real]0,1[@}, theta2=@{real]0,1[@}, useObservedFreqs=@{boolean@}, useObservedFreqs.pseudoCount=@{int>0@})
Hasegawa, Kishino and Yano 1985's substitution model for nucleotides.
The model is similar to @command{F84}, but with a different implementation.
The @var{kappa} parameter used here is comparable to the one in @command{K80}.

@item T92(kappa=@{real>0@}, theta=@{real]0,1[@}, useObservedFreqs=@{boolean@}, useObservedFreqs.pseudoCount=@{int>0@})
Tamura 1992's model for nucleotides, similar to @command{HKY85}, yet assuming that the frequencies of A = T/U and G = C.

@item TN93(kappa1=@{real>0@}, kappa2=@{real>0@}, theta=@{real]0,1[@}, theta1=@{real]0,1[@}, theta2=@{real]0,1[@}, useObservedFreqs=@{boolean@}, useObservedFreqs.pseudoCount=@{int>0@})
Tamura and Nei 1993's model for nucleotides, similar to @command{HKY85}, but allowing for two distinct transition/transversion ratios.

@item GTR(a=@{real>0@}, b=@{real>0@}, c=@{real>0@}, d=@{real>0@}, e=@{real>0@}, theta=@{real]0,1[@}, theta1=@{real]0,1[@}, theta2=@{real]0,1[@}, useObservedFreqs=@{boolean@}, useObservedFreqs.pseudoCount=@{int>0@})
The General Time-Reversible substitution model for nucleotides.
Parameters @var{a}, @var{b}, @var{c}, @var{d}, @var{e} are the entries of the exchangeability matrix.

@item L95(beta=@{real>0@}, gamma=@{real>0@}, delta=@{real>0@}, theta=@{real]0,1[@}, theta1=@{real]0,1[@}, theta2=@{real]0,1[@}, useObservedFreqs=@{boolean@}, useObservedFreqs.pseudoCount=@{int>0@})
The strand-symmetric model of Lobry 1995, for nucleotides.

@item DSO78
Protein substitution model, using the dcmutt implementation of Kosiol and Goldman 2005.

@item JTT92
Protein substitution model, using the dcmutt implementation of Kosiol and Goldman 2005.

@item DSO78+F(theta=@{real]0,1[@}, theta1=@{real]0,1[@}, theta2=@{real]0,1[@}, ..., useObservedFreqs=@{boolean@}, useObservedFreqs.pseudoCount=@{int>0@})
Protein substitution model, using the dcmutt implementation of Kosiol and Goldman 2005 and free equilibrium frequencies.
The @var{thetaX} are frequencies parameters, where X is 1 to 19.
Parameter @var{theta1} is the proportion of A, @var{theta2} is the proportion of R over (1-A), @var{theta3} the proportion of N over (1-A-R), etc.

@item JTT92+F(theta=@{real]0,1[@}, theta1=@{real]0,1[@}, theta2=@{real]0,1[@}, ..., useObservedFreqs=@{boolean@}, useObservedFreqs.pseudoCount=@{int>0@})
Protein substitution model, using the dcmutt implementation of Kosiol and Goldman 2005 and free equilibrium frequencies.

@item Empirical(file=@{path@})
Build a protein substitution model from a file in PAML format.

@item Empirical(file=@{path@}, theta=@{real]0,1[@}, theta1=@{real]0,1[@}, theta2=@{real]0,1[@}, ..., useObservedFreqs=@{boolean@}, useObservedFreqs.pseudoCount=@{int>0@})
Build a protein substitution model from a file in PAML format, and use free equilibrium frequencies.

@end table

@subsubsection{Multiple site models}

@table @command

@item Word(model=@{model description@} [,relrate0=@{real>0@},..,relrate@{n-1@}=@{real>0@}]) 
or 
@item Word(model0=@{model description@}, model1=@{model description@}, ..., modeln=@{model description@}[, relrate0=@{real>0@}, .., relrate@{n-1@}=@{real>0@}])

substitution model on words. The arguments @var{model} and
@var{model@{i@}} are for descriptions of models on single sites such
as nucleotides or proteins. The alphabet must be a Word alphabet.

If the argument is @var{model}, the length of the words in the
substitution model is determined by the length of the words in the
alphabet, and the @emph{same} single site model is used (ie the
parameters are shared between all positions).

If the arguments are @var{model0}, ..., @var{model@{n@}}, the length
of the words in the alphabet must be @var{n}, and each single site
model stands for a single-site substitution model. In that case, all
single site models parameters are position dependent.

Each single site model is normalized and the substitution rates
between words that differ on more than one letter are null.

Arguments @var{relrate@{i@}} stands for the relative substitution rates
of the sites. Default: @var{relrate@{i@}=1/@{n-i@}}, such that the rate
of each site is 1/n.

@example
alphabet=Word(letter=DNA,length=4)
model=Word(model=T92())
@end example
builds a model on 4 bases words, such all sites follow the same T92
model. The parameters names are @var{Word.0123_T92.kappa},
@var{Word.relrate0}, @var{Word.relrate1}, @var{Word.relrate2}.

@example
alphabet=Word(letter=DNA,length=4)
model=Word(model0=T92(), model1=T92(), model2=JC69(), model3=HKY85())
@end example
builds a model on 4 bases words, such first and second sites follow
independent T92 models, third site follows a JC69 model, and fourth
site follows a HKY85 model. Then the parameters names are
@var{Word.0_T92.kappa}, @var{Word.1_T92.kappa},
@var{Word.3_HKY85.kappa}, @var{Word.3_HKY85.theta},
@var{Word.3_HKY85.theta1}, @var{Word.3_HKY85.theta2},
@var{Word.relrate0}, @var{Word.relrate1}, @var{Word.relrate2}.

@item Triplet(model=@{model description@} [, relrate0=@{real>0@}, relrate1=@{real>0@}, relrate2=@{real>0@}]) 
or 
@item Triplet(model0=@{model description@}, model1=@{model description@}, model2=@{model description@}[, relrate0=@{real>0@}, relrate1=@{real>0@}, relrate2=@{real>0@}]) 

substitution model on 3 letters words. The arguments @var{model} and
@var{model@{i@}} are for descriptions of models on single sites such as
nucleotides or proteins. The alphabet must be a 3-letters word
alphabet or a codon alphabet.

If the argument is @var{model}, the @emph{same} single site model is
used on all positions (ie the parameters are shared between all
positions).

If the arguments are @var{model0}, @var{model1}, @var{model2}, each
single site model stands for a single-site substitution model. In that
case, all single site models parameters are position dependent.

Each single site model is normalized and the substitution rates
between triplets that differ on more than one letter are null.

Arguments @var{relrate@{i@}} stands for the relative substitution rates
of the sites. Default: @var{relrate@{i@}=1/@{3-i@}}, such that the rate
of each site is 1/3.

@example
alphabet= StandardCodonAlphabet(letter=DNA)
model=Word(model=T92())
@end example
builds a model on codons, such all sites follow the same T92 model.
The parameters names are @var{Triplet.0123_T92.kappa},
@var{Triplet.relrate0}, @var{Triplet.relrate1}.

@example
alphabet=Word(letter=DNA,length=3)
model=Triplet(model0=T92(), model1=T92(), model2=JC69())
@end example
builds a model on 3 bases words, such first and second sites follow
independent T92 models, and third site follows a JC69 model. Then the
parameters names are @var{Triplet.0_T92.kappa},
@var{Triplet.1_T92.kappa}, @var{Triplet.relrate0},
@var{Triplet.relrate1}.

@item CodonNeutral(model=@{model description@} [, relrate0=@{real>0@}, relrate1=@{real>0@}, relrate2=@{real>0@}]) 
or 
@item CodonNeutral(model0=@{model description@}, model1=@{model description@}, model2=@{model description@}[, relrate0=@{real>0@}, relrate1=@{real>0@}, relrate2=@{real>0@}]) 

substitution model on codons. The arguments @var{model} and
@var{model@{i@}} are for descriptions of models on bases. The alphabet
must be a codon alphabet.

If the argument is @var{model}, the @emph{same} single site model is
used on all positions (ie the parameters are shared between all
positions).

If the arguments are @var{model0}, @var{model1}, @var{model2}, each
single site model stands for a single-site substitution model. In that
case, all single site models parameters are position dependent.

Each single site model is normalized and the substitution rates
between codons that differ on more than one letter are null.

Arguments @var{relrate@{i@}} stands for the relative substitution rates
of the sites. Default: @var{relrate@{i@}=1/@{3-i@}}, such that the rate
of each site is 1/3.

The generator is first computed with these models and parameters on
the whole triplet alphabet, and then the substitution rates to and
from stop codons are set to zero and the generator is normalized with
this modification.

@example
alphabet= StandardCodonAlphabet(letter=DNA)
model=CodonNeutral(model=T92())
@end example
builds a model on codons, such all sites follow the same T92 model.
The parameters names are @var{CodonNeutral.0123_T92.kappa},
@var{CodonNeutral.relrate0}, @var{CodonNeutral.relrate1}.

@example
alphabet= StandardCodonAlphabet(letter=DNA)
model=CodonNeutral(model0=T92(), model1=T92(), model2=JC69())
@end example
builds a model on codons, such that first and second sites follow
independent T92 models, and third site follows a JC69 model. Then the
parameters names are @var{CodonNeutral.0_T92.kappa},
@var{CodonNeutral.1_T92.kappa}, @var{CodonNeutral.relrate0},
@var{CodonNeutral.relrate1}.

@item CodonAsynonymous(geneticcode=@{genetic code description@}, model=@{model description@} [, beta=@{real>0@}])

or

@item CodonAsynonymous(geneticcode=@{genetic code description@}, model0=@{model description@}, model1=@{model description@}, model2=@{model description@}[, beta=@{real>0@}]) 

substitution model on codons. 

The arguments @var{model} and @var{model@{i@}} are for descriptions of
models on bases. The alphabet must be a codon alphabet.

If the argument is @var{model}, the @emph{same} single site model is
used on all positions (ie the parameters are shared between all
positions).

If the arguments are @var{model0}, @var{model1}, @var{model2}, each
single site model stands for a single-site substitution model. In that
case, all single site models parameters are position dependent.

Each single site model is normalized and the substitution rates
between codons that differ on more than one letter are null.

In addition to these models, the @var{geneticcode} argument is
compulsory. The several values available are described below.

Optional argument @var{beta} is the ratio between non-synonymous
substitution rate and synonymous substitution rate. Default value: 1.

@example
alphabet= StandardCodonAlphabet(letter=DNA)
model= CodonAsynonymous(model=T92())
@end example
builds a model on codons, such all sites follow the same T92 model.
The parameters names are @var{CodonAsynonymous.0123_T92.kappa} and 
@var{CodonAsynonymous.beta}.

@example
alphabet= StandardCodonAlphabet(letter=DNA)
model= CodonNeutral(model0=T92(), model1=T92(), model2=JC69())
@end example
builds a model on codons, such that first and second sites follow
independent T92 models, and third site follows a JC69 model. Then the
parameters names are @var{CodonAsynonymous.0_T92.kappa},
@var{CodonAsynonymous.1_T92.kappa}, @var{CodonAsynonymous.beta}.

@item CodonNeutralFrequencies(frequencies=@{frequencies set description@} [, relrate0=@{real>0@}, relrate1=@{real>0@}, relrate2=@{real>0@}]) 

substitution model on codons. The exchangeability model on each site
is the same K80 model, and the equilibrium distribution of the model
is description by the @var{frequencies} argument. See the description
of the Frequencies Set below.

Each single site model is normalized and the substitution rates
between codons that differ on more than one letter are null.

Arguments @var{relrate@{i@}} stands for the relative substitution rates
of the sites. Default: @var{relrate@{i@}=1/@{3-i@}}, such that the rate
of each site is 1/3.

The generator is first computed with these model and distribution on
the whole triplet alphabet, and then the substitution rates to and
from stop codons are set to zero and the generator is normalized with
this modification.

@example
alphabet= CodonNeutralFrequencies(letter=DNA)
model=CodonNeutralFrequencies(frequencies=Full())
@end example
has parameters @var{CodonNeutralFrequencies.012_T92.kappa},
@var{CodonNeutralFrequencies.Full.theta_AAA}, ...,
@var{CodonNeutralFrequencies.Full.theta_TTT},
@var{CodonNeutralFrequencies.relrate0},
@var{CodonNeutralFrequencies.relrate1}.

@item CodonAsynonymousFrequencies(geneticcode=@{genetic code description@}, frequencies=@{frequencies set description@} [, beta=@{real>0@}])

substitution model on codons. The exchangeability model on each site
is the same K80 model, and the equilibrium distribution of the model
is description by the @var{frequencies} argument. See the description
of the Frequencies Set below.

Each single site model is normalized and the substitution rates
between codons that differ on more than one letter are null.

In addition to these models, the @var{geneticcode} argument is
compulsory. The several values available are described below.

Optional argument @var{beta} is the ratio between non-synonymous
substitution rate and synonymous substitution rate. Default value: 1.

The generator is first computed with these model and distribution on
the whole triplet alphabet, and then the substitution rates to and
from stop codons are set to zero and the generator is normalized with
this modification.

@example
alphabet= CodonAsynonymousFrequencies(letter=DNA)
model=CodonAsynonymousFrequencies(frequencies=Full())
@end example
has parameters @var{CodonAsynonymousFrequencies.012_T92.kappa},
@var{CodonAsynonymousFrequencies.Full.theta_AAA}, ...,
@var{CodonAsynonymousFrequencies.Full.theta_TTT},
@var{CodonAsynonymousFrequencies.beta}.


@item GY94(geneticcode=@{genetic code description@} [, kappa=@{real>0@}, V=@{real>0@}])
Goldman and Yang (1994) substitution model for codons (default values:
@var{kappa}=1 and @var{V}=10000).

The @var{geneticcode} describes the genetic code, see below.

@item YN98(geneticcode=@{genetic code description@} [, kappa=@{real>0@}, omega=@{real>0@}])
Yang and Nielsen (1998) substitution model for codons (default values:
@var{kappa}=1 and @var{omega}=1).

The @var{geneticcode} describes the genetic code, see below.

@end table



The several @var{geneticcode} values available are:

@itemize
@item EchinodermMitochondrialGeneticCode
@item InvertebrateMitochondrialGeneticCode
@item StandardGeneticCode
@item VertebrateMitochondrialGeneticCode
@end itemize 



@subsubsection{Meta models}

@table @command

@item TS98(model=@{model description@}, s1=@{real>0@}, s2=@{real>0@})
Tuffley and Steel 1998's 'covarion' model, taking a nested substitution model as argument for @var{model}.
The nested model can be any substitution model for any alphabet.

@item G01(model=@{model description@}, rdist=@{rate distribution description@}, mu=@{real>0@})
Galtier 2001's 'covarion' model, taking a nested substitution model as argument for @var{model} and a rate distribution for parameter @var{rdist} (see below).
The nested model can be any substitution model for any alphabet.

@item RE08(model=@{model description@}, lambda=@{real>0@}, mu=@{real>0@})
Rivas and Eddy 2008's substitution model with gaps, taking a nested substitution model as argument for @var{model}.
Parameter @var{lambda} is the insertion rate, while @var{mu} is the deletion rate.

@end table

@subsubsection{Linking parameters}

It is possible to reduce the parameter space by putting extra constraints on parameters, using for instance
@example
model=TN93(kappa1=1.0, kappa2=kappa1, theta=0.5)
@end example
In that particular case the resulting model is strictly equivalent to the HKY85 model. This syntax however allows to define a larger set of models.


@subsection Setting up non-stationary / non-homogeneous models

You can specify a wide range of non-homogeneous models, by combining different options.

@subsubsection One-per-branch non-homogeneous models

This option share the same parameters as the homogeneous case, since the same kind of model is used for each branch. The additional options are the following:
@table @command

@item nonhomogeneous_one_per_branch.shared_parameters = @{list<chars>@}
List the names of the parameters that are shared by all branches.
In Galtier & Gouy model, that would be @var{T92.kappa}, since only the theta parameter is branch-specific.

@end table

@subsubsection General non-homogeneous models

Bio++ provides a general syntax to specify almost any non-homogeneous model.

@table @command

@item nonhomogeneous.number_of_models = @{int>0@}
Set the number of distinct models to use.

@end table

You now have to configure each model individually, using the syntax introduced for the homogeneous case, excepted that model will be numbered, for instance:

@example
model1 = T92(theta=0.39, kappa=2.79)
@end example

The additional option is available to attach the model to branches in the tree, specified by the id of the upper node in the tree:

@table @command

@item model1.nodes_id = 1,5,10:15,19
Specify the ids of the nodes to which the node is attached.
Id ranges can be specified using the @option{begin:end} syntax.

@end table

You can also make a given model share parameters with another one by writing for instance:
@example
model2 = T92(theta=0.39, kappa=model1.T92.kappa)
@end example
Please watch out the syntax, parameters are referred to as [model name].[parameter name] in that case.

Finally, you may find useful the following options:

@table @command

@item output.tree_ids.file = @{@{path@}|none@}
A tree file in newick format, with node ids instead of bootstrap
values, and leaf names with their id as suffix.
The use of that option will cause the program to exit just after producing the tagged tree.

@end table

@subsubsection Root frequencies

As since version 0.4.0, BppSuite uses the keyval syntax to set up root frequencies,
@table @command
@item nonhomogeneous.root_freq=@{description of frequency set@}
@end table

The Frequencies set declaration are described below.

@subsection Frequencies Set

The following functions are available:

@table @command

@item Fixed()
All frequencies are fixed to their initial value and are not estimated.

@item GC(theta=@{real]0,1[@})
For nucleotides only, set the G content equal to the C content.

@item Full(theta_1=@{real]0,1[@}, theta_2=@{real]0,1[@}, ..., theta_N=@{real]0,1[@})
Full parametrization. Contains N free parameters, where N is equal to the size of the alphabet - 1. For codon models, N is the size of the alphabet - 1 - the number of stop codons, whose frequencies are set to 0.
For nucleotide sequences, theta is the GC content, theta_1 is the proportion of A over A+T, and theta_2 is the proportion of G over G+C.


@end table

All functions accept the following arguments, that take priority over the parameter specification:
@table @command

@item init=@{balanced,observed@}
Set all frequencies to the same value, or to their observed counts.

@item values=(@{vector<double>@})
Explicitly set all frequencies manually. The size of the input vector should equal the number of resolved states in the alphabet, be in alphabetical order of states, and sum to one.

@end table



@subsection Rate across site distribution

From version 0.4.0, BppSuite uses the keyval syntax for specifying the distributions of substitution rate across sites.

@table @command

@item rate_distribution = @{rate distribution description@}
Specify the rate across sites distribution.

@end table

The following distributions are currently available:

@table @command

@item Uniform
Uses a constant rate across sites.

@item Gamma(n=@{int>=2@}, alpha=@{float>0@})
A discretized gamma distribution of rates, with @var{n} classes, and a given shape.

@item Invariant(dist=@{rate distribution description@}, p=@{real[0,1]@})
A composite distribution allowing a special class of invariant site, with a probability @var{p}.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node Estimation, WritingSequences, Model, Common
@section Numerical parameters estimation

Some programs allow you to (re-)estimate numerical parameters, including
@itemize @bullet
@item
Branch lengths

@item
Entries of the substitution matrices, included base frequencies values)

@item
Parameters of the rate distribution (currently shape parameter of the gamma law, proportion of invariant sites).

@end itemize

@table @command

@item optimization = @{boolean@}
Tells if numerical parameters should be estimated.
Only numerical parameters will be estimated using this procedure.

@item optimization.method=@{DB|fullD@}
The optimization method to use.
DB (default) uses derivatives-based optimization for branch lengths + Brent for
other parameters, and the fullD options uses derivatives for all parameters, with numerical derivatives for non-branch lengths parameters.

@item optimization_DB.nstep=@{int>=1@}
Number of progressive steps to perform during optimization.
If @option{nstep=3} and @option{precision=E-6}, a first optimization with @option{precision=E-2}, will be performed, then a round with @option{precision} set to E-4 and
finally @option{precision} will be set to E-6.
This approach generally saves a significant amount of computation time.

@item optimization.method.derivatives = @{newton|gradient@}
Derivatives-based algorithm to use.
The Newton algorithm uses derivatives up to the second order, and is the recommended choice.
The gradient algorithm uses only first order derivatives and can also be used.

@item optimization.final = @{powell|simplex@}
Optional final optimization step, useful if numerical derivatives are to be used.
Leave the field empty in order to skip this step.

@item optimization.profiler = @{@{path@}|std|none@}
A file where to dump optimization steps (a file path or std for
standard output or none for no output).

@item optimization.message_handler = @{@{path@}|std|none@}
A file where to dump warning messages.

@item optimization.max_number_f_eval = @{int<0@}
The maximum number of likelihood evaluations to perform.

@item optimization.ignore_parameter = @{list<chars>@}
A list of parameters to ignore during the estimation process.
The parameter name should include there "namespace", that is their model name, for instance K80.kappa, TN93.theta, GTR.a, Gamma.alpha, etc.
For nested models, the syntax is the following: @command{G01.rdist_Gamma.alpha},
    @command{TS98.model_T92.kappa}, @command{RE08.lamba},
    @command{RE08.model_G01.model_GTR.a}, etc. 'Ancient' will ignore all parameters in the ancestral frequency set (non-homogeneous models), and 'BrLen' will ignore all branch lengths.

@item optimization.tolerance = @{float>0@}
The precision on the log-likelihood to reach.

@item output.tree.file = @{@{path@}|none@}
File path where to write the optimized tree.

@item output.infos = @{@{path@}|none@}
A text file containing several statistics for each site in the
alignment.
These statistics include the posterior rate, rate class with maximum posterior probability and whether the site is conserved or not.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node WritingSequences,  , Estimation, Common
@section Writing sequences/alignments to files

@table @command

@item output.sequence.file = @{path@}
The output file where to write the sequences.

@item output.sequence.format = @{sequence format description@}
The output file format, using the same syntax as for reading (@pxref{Sequences}).
Only formats Fasta, Mase and Phylip are supported for writing.
In addition, most of the formats support the @command{length} argument, that specifies the maximum number of sequence characters to output on each line (default set to 100).

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node Reference,  , Common, Top
@chapter Bio++ Program Suite Reference

@c ------------------------------------------------------------------------------------------------------------------

This section now details the specific options for each program in the Bio++ Program suite.

@c ------------------------------------------------------------------------------------------------------------------

@menu
* bppml::                       Bio++ Maximum Likelihood.
* bppseqgen::                   Bio++ Sequence Generator.
* bppancestor::                 Bio++ Ancestral Sequences and Rates reconstruction.
* bppdist::                     Bio++ Distance Methods.
* bpppars::                     Bio++ Maximum Parsimony.
* bppconsense::                 Bio++ Consensus Trees.
* bppphysamp::                  Bio++ Phylogenetic Sampler.
* bppreroot::                   Bio++ Serial Tree Re-rooting.
* bppseqman::                   Bio++ Sequences Manipulation.
@end menu

@node bppml, bppseqgen, Reference, Reference
@section BppML: Bio++ Maximum Likelihood

The BppML program uses the common syntax introduced in the previous section for setting the alphabet, loading the sequences (@pxref{Sequences}), specifying the model (@pxref{Model}), and estimating parameters (@pxref{Estimation}).

The BppML program allows you to optimize tree topologies and model parameters and perform a bootstrap analysis.

@subsection Branch lengths initial values

@table @command

@item init.tree = @{user|random@}
Set the method for the initial tree to use.
The @option{user} option allows you to use an existing file using the method described in the Common options section.
This file may have been built using another method like neighbor joining or parsimony for instance.
The @option{random} option picks a random tree, which is handy to test convergence.
This may however slows down significantly the optimization process.

@item init.brlen.method = @{method description@}
Set how to initialize the branch lengths.
Available methods include:

@table @command

@item Input
Keep initial branch lengths as is.

@item Equal(value=@{float>0@})
Set all branch lengths to the same value, provided as argumet.

@item Clock
Coerce to a clock tree.

@item Grafen(height=@{@{real>0@}|input@}, rho = @{real>0@})
Uses Grafen's method to compute branch lengths.
In Grafen's method, each node is given a weight equal to the number of underlying leaves.
The length of each branch is then computed as the difference of the weights of the connected nodes, and further divided by the number of leaves in the tree.
The height of all nodes are then raised to the power of 'rho', a user specified value.
The tree is finally scaled to match a given total height, which can be the original one (@option{height=input}), or fixed to a certain value (usually @option{height=1}).
A value of rho=0 provides a star tree, and the greater the value of rho, the more recent the inner nodes. 

@end table
@end table

@subsection Topology optimization

@table @command

@item optimization.topology = @{boolean@}
Enable the tree topology estimation.

@item optimization.topology.algorithm = @{NNI@}
Algorithm to use for topology estimation: only NNI available for now.

@item optimization.topology.algorithm_nni.method = @{fast|better|phyml@}
Set the NNI method to use.
@option{fast}: test sequentially all NNI, if a NNI improving the likelihood is found, it is performed.
@option{better}: test all possible NNIs, do the one with the biggest likelihood increase.
@option{phyml}: test all possible NNIs, try doing all the improving ones.
If the final likelihoods is better, perform all NNIs.
Otherwise, try to do half of them, and so on. 
In most cases the @option{phyml} option shows the best performance.

@item optimization.topology.nstep = @{int>0@}
Number of phyml topology movement steps before re-optimizing parameters.

@item optimization.topology.numfirst = @{boolean@}
Shall we estimate parameters before looking for topology movements?

@item optimization.topology.tolerance.before = @{real>0@}
Tolerance for the prior-topology estimation.
The tolerance numbers should not be too low, in order to save computation time and also for a better topology estimation.
The @option{optimization.tolerance} parameter will be used for the final optimization of numerical parameters (see Common options).

@item optimization.topology.tolerance.during = 100
Tolerance for the during-topology estimation

@item optimization.scale_first = no
Shall we first scale the tree before optimizing parameters? [deprecated]

@end table


@subsection Molecular clock

BppML can also optimize branch lengths with a molecular clock:

@table @command

@item optimize.clock=@{no|global@}
Tell if a molecular clock should be assumed.
Topology estimation is not possible with a clock constraint.

@end table


@subsection Output results

@table @command

@item output.infos = @{@{path@}|none@}
Alignment information log file (site specific rates, etc):

@item output.estimates = @{@{path@}|none@}
Write numerical parameter estimated values.

@end table

@subsection Bootstrap analysis

@table @command

@item bootstrap.number = @{int>0@}
Number of replicates. A reasonable value would be >= 100.

@item bootstrap.approximate = @{boolean@}
Tell if numerical parameters should be kept to their initial value when bootstrapping. 

@item bootstrap.verbose = @{boolean@}
Set this to yes for detailed output when bootstrapping. 

@item bootstrap.output.file = @{@{path@}|none@}
Where to write the resulting trees (multi-trees newick format).

@end table

@subsection Rather technical options

Theses options are mainly for debugging or testing purpose, in most case you will be happy with the default setting.

@table @command

@item likelihood.recursion = @{simple|double@}
Set the type of likelihood recursion to use.
@option{simple}: derivatives take more time to compute, but likelihood computation is faster.
For big data sets, it can save a lot of memory usage too, particularly when the data are compressed.
@option{double}: uses more memory and need more time to compute likelihood, due to the double recursion.
Analytical derivatives are however faster to compute.

This command has no effect in the following cases: (i) topology estimation: this requires a double recursive algorithm, (ii) optimization with a molecular clock: a simple recursion with data compression is used in this case, due to the impossibility of computing analytical derivatives.

@item likelihood.recursion_simple.compression = @{simple|recursive@}

Site compression for the simple recursion:
@option{simple}: identical sites are not computed twice, @option{recursive}: look for site patterns to save computation time during optimization, but requires extra time for building the patterns.
This is usually the best option, particularly for nucleotide data sets.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node bppseqgen, bppancestor, bppml, Reference
@section BppSeqGen: Bio++ Sequence Simulator

The BppSeqGen program uses the common syntax introduced in the previous section for setting the alphabet, loading the sequences (@pxref{Sequences}) and tree (@pxref{Tree}), specifying the model (@pxref{Model}) and writing sequence data (@pxref{WritingSequences}).

@table @command

@item number_of_sites = @{int>0@}
The number of site positions to simulate.

@item input.infos = @{path@}
A info file like the one output by bppML.
The estimated site-specific rates will then be used to simulate the same number of sites as found in the info file, with the corresponding rates.

@end table
 
@c ------------------------------------------------------------------------------------------------------------------

@node bppancestor, bppdist, bppseqgen, Reference
@section BppAncestor: Bio++ Ancestral Sequence and Rate Reconstruction

The BppAncestor program uses the common syntax introduced in the previous section for setting the alphabet, loading the sequences (@pxref{Sequences}) and tree (@pxref{Tree}), specifying the model (@pxref{Model}) and writing sequence data (@pxref{WritingSequences}).

Specific options are:
@table @command

@item asr.method = @{marginal@}
That's the only option for now!

@item asr.probabilities = @{boolean@}
Tells if we should output the site specific probabilities in each case.

@item asr.sample = @{boolean@}
Tell if we should sample from the posterior distribution instead of using the maximum probability.

@item asr.sample.number = 10 [[asr.sample=yes]]
Number of sample sequences to output.

@item output.sites.file = @{@{path@}|none@}
Alignment information log file (site specific rates, probabilities, etc).

@item output.nodes.file = @{@{path@}|none@}
Ancestral nodes information: expected frequencies of ancestral states.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node bppdist, bpppars, bppancestor, Reference
@section BppDist: Bio++ Distance Methods
 
The BppDist program uses the common syntax introduced in the previous section for setting the alphabet, loading the sequences (@pxref{Sequences}) and tree (@pxref{Tree}) and specifying the model (@pxref{Model}, only the section corresponding to the homogeneous case).

Specific options are:
@table @command

@item output.matrix.file = @{@{path@}|none@}
Where to write the matrix file (only philip format supported for now).

@item method = @{wpgma|upgma|nj|bionj@}
The algorithm to use to build the tree.

@item optimization.method = @{init|pairwise|iterations@}
There are several ways to optimize substitution parameters.
The @option{init} option corresponds to the standard behavior, that is, keeping them to their initial, user-provided value.
The @option{pairwise} option estimate those parameters in a pairwise manner.
This should be avoided, particularly with parameter-rich models.
Finally the @option{iterations} option corresponds to Ninio et al, Bioinformatics (2007) recursive algorithm:
After each distance tree, a global ML estimation of the substitution parameters is performed.
The estimated values are then used to rebuild a distance matrix and a tree.
The algorithm stops when the topology does not change anymore.
The ML optimization uses the parameters described in (@pxref{Estimation}).

@item output.tree.file = @{@{path@}|none@}
The final tree, possibly with bootstrap values:
BppDist uses the same options for bootstrap analysis than the BppML program (@pxref{bppml}).
@end table

@c ------------------------------------------------------------------------------------------------------------------

@node bpppars, bppconsense, bppdist, Reference
@section BppPars: Bio++ Maximum Parsimony
 
The BppPars program is currently quite limited and should not be used for serious phylogenetic analysis.
It can compute parsimony scores and perform topology estimation using the same algorithm of BppML.
It uses the common syntax introduced in the previous section for setting the alphabet, loading the sequences (@pxref{Sequences}) and tree (@pxref{Tree})).

Specific options are:
@table @command

@item optimization.topology = @{boolean@}
Tell if topology has to be estimated.

@item output.tree.file = @{@{path@}|none@}
Where to print the output file.

@item bootstrap.number = @{int>0@}
Number of bootstrap replicates to perform.

@item bootstrap.output.file = @{@{path@}|none@}
Where to write bootstrap trees.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node bppconsense, bppphysamp, bpppars, Reference
@section BppConsense: Bio++ Consensus Trees

Probably one of the simplest program to use in the suite, just takes a list of trees (for instance produced by BppML, BppDist or BppPars with the bootstrap option enabled) and compute bootstrap values for a reference tree, provided as input, or constructed using a consensus method.
The program uses the multiple-trees reading options for input (@pxref{Tree}) and single-tree writing options for output.

There are only specific options here:
@table @command

@item tree = @{tree methods@}
The method to use for getting the reference tree.
Available function are:

@table @command

@item Input
The tree is loaded using the single-tree reading options (@pxref{Tree}). 

@item Consensus(threshold = @{int[0,1]@})
Build a consensus tree according to a given threshold.
0 will output a fully resolved tree, 0.5 corresponds to the majority rule and 1 to the strict consensus, but any intermediate value can be specified.

@end table

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node bppphysamp, bppreroot, bppconsense, Reference
@section BppPhySamp: Bio++ Phylogenetic Sampler
 
The Bio++ Phylogenetic Sampler samples sequences from a file according to phylogenetic information.
The goal is to clean a big data set by removing redundant sequences, bringing only few additional information for evolutionary analyses.

The BppPhySamp programs uses the common options for setting the alphabet, loading the sequences (@pxref{Sequences}) and (@pxref{Tree}) and writing the resulting data set (@pxref{WritingSequences}).

@table @command

@item input.method = @{tree|matrix@}
The method to provide phylogenetic information, either by a tree or a matrix.
If the @option{tree} option is used, then the options for reading trees are used (@pxref{Tree}).

@item input.matrix = @{path@} [[input.method = matrix]]
The input matrix file.

@item threshold = @{float>0@}
The minimum distance separating two sequences in the sampled data set.
Any sequences closer than this threshold in the original data set will be confronted so that only one is kept.

@item choice_criterion = @{length|length.complete|random@}
How to chose between closely related sequences? @option{length} takes the longest (maximum number of non-gap positions), @option{length.complete} takes the sequence with the maximum number of fully resolved positions and @option{random} picks one sequence at random.
@end table 

@c ------------------------------------------------------------------------------------------------------------------

@node bppreroot, bppseqman, bppphysamp, Reference
@section BppReroot: Bio++ Serial Tree Re-rooting
 
@table @command

@item input.trees.file=@{path@}
A path toward multi-trees file (newick).

@item outgroups.file=@{path@}
A path toward a file containing the different levels of outgroups.

@item print.option=@{boolean@}
If set to true, the unrootable trees are printed as unrooted in the output file, otherwise the unrootable trees are not printed.
  
@item tryAgain.option=@{boolean@}
If set to true and ReRoot finds a non-monophyletic outgroup, it tries the next outgroup.
Otherwise, if ReRoot finds a non-monophyletic outgroup, the analysis for this tree is interrupted.
No more outgroup are analysed.

@item output.trees.file=@{path@}
File where to write the rerooted trees.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node bppseqman,  , bppreroot, Reference
@section BppSeqMan: Bio++ Sequence Manipulation

The Bio++ Sequence Manipulator convert between various file formats, and can also perform various operations on sequences.
It uses the common options for setting the alphabet, loading the sequences (@pxref{Sequences}) and writing the resulting data set (@pxref{WritingSequences}).
It can use the ``Generic'' option for alphabets if only file format conversion is to be performed, but the correct alphabet must be specified for more advanced manipulations, like in silico molecular biology.

BppSeqMan can perform any number of elementary operation, in any order, providing the output of operation n is compatible with input of operation n+1, and that the input of operation 1 is compatible with the input data.

Specific options:
@table @command

@item sequence.manip = @{list<string>@}
The list, in appropriate order, of elementary operations to perform.
See below for a list of these operations.
@end table

@table @option
@item Complement [[alphabet = DNA or RNA]]
Convert to the complementary sequence, keeping the original alphabet.

@item Transcript [[alphabet = DNA or RNA]]
Convert to the complementary sequence, switching the type of alphabet (DNA<->RNA).

@item Switch [[alphabet = DNA or RNA]]
Change the alphabet type (DNA<->RNA).

@item Translate(code = @{Standard|VerMito|InvMito|EchMito@}) [[alphabet = DNA or RNA]]
Convert to proteins. You have to specify a genetic code, see specific options.
@option{code}: The genetic code to use for the translation.

@item Invert
Invert the sequence 5' <-> 3' or N <-> C

@item RemoveGaps
Remove all gaps in sequences (ie, 'unalign')

@item GapToUnknown
Change gaps to fully unresolved characters, N for nucleotides and X for proteins.

@item UnknownToGap
Change (partially) unresolved characters to gaps.

@item ResolveDotted(alphabet=@{RNA|DNA|Proteins@}) [[Aligned sequences]]
Convert a human-readable alignment to a machine-readable alignment.
This manipulation must be first if it is used, and the data must be load with the @option{Generic} alphabet.
@option{alphabet}: The alphabet to use in order to resolve a dotted alignment.

@item KeepComplete(maxGapAllowed=@{int>0@} or @{float[0,100]@}+%) [[Aligned sequences]]
Keep only complete sites, ie sites without any gap. Sites with unresolved characters are not removed.
It is also possible to fix a maximum proportion of gaps, see specific options.
@option{maxGapAllowed}: The maximum proportion of gaps allowed.

@end table

Examples of use:

@table @bullet

@item Just change file format:
@example
sequence.manip=
@end example

@item Change DNA to RNA:
@example
sequence.manip=Switch
@end example

@item Unalign sequences, perform transcription and translate to proteins:
@example
sequence.manip=RemoveGaps,Transcript,Translate
@end example

@item Change all unresolved characters to gaps and keep only positions with less than 5 gaps:
@example
sequence.manip=UnknownToGap,KeepComplete(maxGapAllowed=5)
@end example

@item Keep only positions with less than 30% of gaps, and change them to unresolved characters:
@example
sequence.manip=KeepComplete(maxGapAllowed=30%),GapToUnknown
@end example

@end table

@c ------------------------------------------------------------------------------------------------------------------

@c ------------------------------------------------------------------------------------------------------------------
@c end of document

@c @node Index,  , Reference, Top
@c @unnumbered Index
@c
@c @printindex cp

@bye
